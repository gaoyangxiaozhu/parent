# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
####### DEBUGGING
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","passwd")

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

#worker1 = worker.Worker('example-worker', 'pass')
#worker2 = worker.Worker('web-worker', '123')

c['workers'] = [worker.Worker("web-worker", "123")]
#c['workers'] = [worker1, worker2]


# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/gaoyangxiaozhu/child.git',
        workdir='gitpoller-web-workdir',
        branch='master',
        pollinterval=120))
c['change_source'].append(changes.GitPoller(
        'git://github.com/gaoyangxiaozhu/child2.git',
        workdir='gitpoller-web-workdir',
        branch='master',
        pollinterval=180))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

#c['schedulers'].append(schedulers.SingleBranchScheduler(
#                            name="web-scheulder",
#                            change_filter=util.ChangeFilter(branch='master'),
#                            treeStableTimer=None,
#                            codebases = {'codebase1': {
#                                                    'repository':'git://github.com/gaoyangxiaozhu/child.git',
#                                                    'branch':'master',
#                                                    'revision': None
#                                                    },                                           
#                                        'codebase2': {
#                                                    'repository':'git://github.com/gaoyangxiaozhu/child2.git',
#                                                    'branch':'master',
#                                                    'revision':None
#                                                    }
#                                        },
#                            builderNames=["webbuild"]))


c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="child-scheulder",
                            change_filter=util.ChangeFilter(repository='git://github.com/gaoyangxiaozhu/child.git', branch='master'),
                            treeStableTimer=None,
                            builderNames=["webbuild"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="child2-scheulder",
                            change_filter=util.ChangeFilter(repository='git://github.com/gaoyangxiaozhu/child2.git', branch='master'),
                            treeStableTimer=None,
                            builderNames=["webbuild"]))

c['schedulers'].append(
            schedulers.ForceScheduler(name="webforce",
                buttonName="Force Build HTML",
                builderNames=["webbuild"],
                reason=util.StringParameter(name="reason",
                                        label="Reason:",
                                        default="Force build html",
                                        required=True, size=80),
                codebases=[
                    util.CodebaseParameter(
                    "",
                    name="Main repository",
                    branch=util.StringParameter(name="branch",
                                                label="Branch",
                                                required=False),
                    revision=util.FixedParameter(name="revision", default=""),
                    repository=util.FixedParameter(name="repository", default=""),
                    project=util.FixedParameter(name="project", default=""),
                    ),
                ],
))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

#factory = util.BuildFactory()
# check out the source
#factory.addStep(steps.Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))

webFactory = util.BuildFactory()


makemerge    = steps.ShellCommand(
                name='pull md',
                command="git submodule update --remote --merge",
                haltOnFailure = True)
makegenerate = steps.ShellCommand(
                name="generate html",
                command="./generate_html.sh",
                haltOnFailure = True)
makeupdate   = steps.ShellCommand(
                name="update html",
                command="./update_remote.sh",
                haltOnFailure = True)

webFactory.addStep(steps.Git(repourl='git@github.com:gaoyangxiaozhu/parent.git', mode='incremental', submodules=True))
webFactory.addStep(makemerge)
webFactory.addStep(makegenerate)
webFactory.addStep(makeupdate)


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="webbuild",
        workernames=["web-worker"],
        factory=webFactory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "build web"
c['titleURL'] = "https://github.com/gaoyangxiaozhu/parent.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
